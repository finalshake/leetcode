/* 2021.03.25
 * 今天还信用卡，又没钱了，好烦。
 * leetcode: 230 二叉搜索树中第k小的元素
 * 给定一个二叉搜索树的根节点 root ，和一个整数 k ，请你设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。

 

示例 1：

输入：root = [3,1,4,null,2], k = 1
输出：1

示例 2：

输入：root = [5,3,6,2,4,null,null,1], k = 3
输出：3

 

 

提示：

    树中的节点数为 n 。
    1 <= k <= n <= 104
    0 <= Node.val <= 104

 ****************************************************************************************************************
* 中序递归遍历写如数组当然最简单了。但是进阶：如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 
* 小的值，你将如何优化算法？
* 看了题解的提醒，总结出一套迭代法遍历二叉树的方法，要用到栈stack：
* */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
      stack<TreeNode*> s;
      while(true)
      {
        while(root)
        {
          s.push(root);
          root = root->left;
        }
        root = s.top();
        s.pop();                          // 以上部分相当于遍历左子树
        // 中序遍历处理在这里写。
        if(--k == 0)
          return root->val;
        root = root->right;               // 开始遍历右子树
      }

    }
};
